/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])})(e,t)};function e(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(n,e){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(n,u)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(n){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&n[e],r=0;if(t)return t.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,o,i=t.call(n),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u}function i(n,e){for(var t=0,r=e.length,o=n.length;t<r;t++,o++)n[o]=e[t];return n}function u(n){return this instanceof u?(this.v=n,this):new u(n)}function c(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=t.apply(n,e||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(n){o[n]&&(r[n]=function(e){return new Promise((function(t,r){i.push([n,e,t,r])>1||a(n,e)}))})}function a(n,e){try{(t=o[n](e)).value instanceof u?Promise.resolve(t.value.v).then(s,l):f(i[0][2],t)}catch(n){f(i[0][3],n)}var t}function s(n){a("next",n)}function l(n){a("throw",n)}function f(n,e){n(e),i.shift(),i.length&&a(i[0][0],i[0][1])}}Object.create,Object.create;var a=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function s(n){return"function"==typeof n}function l(n){return s(null==n?void 0:n.then)}var f,d="function"==typeof Symbol&&Symbol.observable||"@@observable",h=((f=function(n){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,e){return e+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),f.prototype.constructor=f,f);function p(n,e){if(n){var t=n.indexOf(e);0<=t&&n.splice(t,1)}}var v=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._teardowns=null}return n.prototype.unsubscribe=function(){var n,e,t,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=r(a),f=l.next();!f.done;f=l.next())f.value.remove(this)}catch(e){n={error:e}}finally{try{f&&!f.done&&(e=l.return)&&e.call(l)}finally{if(n)throw n.error}}else a.remove(this);var d=this.initialTeardown;if(s(d))try{d()}catch(n){c=n instanceof h?n.errors:[n]}var p=this._teardowns;if(p){this._teardowns=null;try{for(var v=r(p),y=v.next();!y.done;y=v.next()){var m=y.value;try{b(m)}catch(n){c=null!=c?c:[],n instanceof h?c=i(i([],o(c)),o(n.errors)):c.push(n)}}}catch(n){t={error:n}}finally{try{y&&!y.done&&(u=v.return)&&u.call(v)}finally{if(t)throw t.error}}}if(c)throw new h(c)}},n.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)b(e);else{if(e instanceof n){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(t=this._teardowns)&&void 0!==t?t:[]).push(e)}},n.prototype._hasParent=function(n){var e=this._parentage;return e===n||Array.isArray(e)&&e.includes(n)},n.prototype._addParent=function(n){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(n),e):e?[e,n]:n},n.prototype._removeParent=function(n){var e=this._parentage;e===n?this._parentage=null:Array.isArray(e)&&p(e,n)},n.prototype.remove=function(e){var t=this._teardowns;t&&p(t,e),e instanceof n&&e._removeParent(this)},n.EMPTY=((e=new n).closed=!0,e),n;var e}();function y(n){return n instanceof v||n&&"closed"in n&&s(n.remove)&&s(n.add)&&s(n.unsubscribe)}function b(n){s(n)?n():n.unsubscribe()}v.EMPTY;var m=null,w=null,g=void 0,E=!1,x=!1,_={setTimeout:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=_.delegate;return((null==t?void 0:t.setTimeout)||setTimeout).apply(void 0,i([],o(n)))},clearTimeout:function(n){var e=_.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(n)},delegate:void 0};function T(n){_.setTimeout((function(){if(!m)throw n;m(n)}))}function C(){}var S=A("C",void 0,void 0);function A(n,e,t){return{kind:n,value:e,error:t}}var I=null;function L(n){E&&I&&(I.errorThrown=!0,I.error=n)}var P=function(n){function t(e){var t=n.call(this)||this;return t.isStopped=!1,e?(t.destination=e,y(e)&&e.add(t)):t.destination=H,t}return e(t,n),t.create=function(n,e,t){return new O(n,e,t)},t.prototype.next=function(n){this.isStopped?M(function(n){return A("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?M(A("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?M(S,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(v),O=function(n){function t(e,t,r){var o,i=n.call(this)||this;if(s(e))o=e;else if(e){var u;o=e.next,t=e.error,r=e.complete,i&&x?(u=Object.create(e)).unsubscribe=function(){return i.unsubscribe()}:u=e,o=null==o?void 0:o.bind(u),t=null==t?void 0:t.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?N(o):C,error:N(null!=t?t:k),complete:r?N(r):C},i}return e(t,n),t}(P);function N(n,e){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{n.apply(void 0,i([],o(e)))}catch(n){E?L(n):T(n)}}}function k(n){throw n}function M(n,e){var t=w;t&&_.setTimeout((function(){return t(n,e)}))}var H={closed:!0,next:C,error:k,complete:C};function j(n){return n}function F(n){return 0===n.length?j:1===n.length?n[0]:function(e){return n.reduce((function(n,e){return e(n)}),e)}}var B=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(n,e,t){var r,o=this,i=(r=n)&&r instanceof P||function(n){return n&&s(n.next)&&s(n.error)&&s(n.complete)}(r)&&y(r)?n:new O(n,e,t);return function(n){if(E){var e=!I;if(e&&(I={errorThrown:!1,error:null}),n(),e){var t=I,r=t.errorThrown,o=t.error;if(I=null,r)throw o}}else n()}((function(){var n=o,e=n.operator,t=n.source;i.add(e?e.call(i,t):t?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(e){n.error(e)}},n.prototype.forEach=function(n,e){var t=this;return new(e=D(e))((function(e,r){var o;o=t.subscribe((function(e){try{n(e)}catch(n){r(n),null==o||o.unsubscribe()}}),r,e)}))},n.prototype._subscribe=function(n){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(n)},n.prototype[d]=function(){return this},n.prototype.pipe=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return F(n)(this)},n.prototype.toPromise=function(n){var e=this;return new(n=D(n))((function(n,t){var r;e.subscribe((function(n){return r=n}),(function(n){return t(n)}),(function(){return n(r)}))}))},n.create=function(e){return new n(e)},n}();function D(n){var e;return null!==(e=null!=n?n:g)&&void 0!==e?e:Promise}function R(n,e){return new B((function(t){var r=0;return e.schedule((function(){r===n.length?t.complete():(t.next(n[r++]),t.closed||this.schedule())}))}))}var Y="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function U(n,e){if(!n)throw new Error("Iterable cannot be null");return new B((function(t){var r=new v;return r.add(e.schedule((function(){var o=n[Symbol.asyncIterator]();r.add(e.schedule((function(){var n=this;o.next().then((function(e){e.done?t.complete():(t.next(e.value),n.schedule())}))})))}))),r}))}function q(n){return s(n[d])}function G(n){return s(null==n?void 0:n[Y])}function z(n){return Symbol.asyncIterator&&s(null==n?void 0:n[Symbol.asyncIterator])}function J(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function W(n){return c(this,arguments,(function(){var e,r,o;return t(this,(function(t){switch(t.label){case 0:e=n.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(e.read())];case 3:return r=t.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(o)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function K(n){return s(null==n?void 0:n.getReader)}function Q(n,e){return e?function(n,e){if(null!=n){if(q(n))return function(n,e){return new B((function(t){var r=new v;return r.add(e.schedule((function(){var o=n[d]();r.add(o.subscribe({next:function(n){r.add(e.schedule((function(){return t.next(n)})))},error:function(n){r.add(e.schedule((function(){return t.error(n)})))},complete:function(){r.add(e.schedule((function(){return t.complete()})))}}))}))),r}))}(n,e);if(a(n))return R(n,e);if(l(n))return function(n,e){return new B((function(t){return e.schedule((function(){return n.then((function(n){t.add(e.schedule((function(){t.next(n),t.add(e.schedule((function(){return t.complete()})))})))}),(function(n){t.add(e.schedule((function(){return t.error(n)})))}))}))}))}(n,e);if(z(n))return U(n,e);if(G(n))return function(n,e){return new B((function(t){var r;return t.add(e.schedule((function(){r=n[Y](),function(n,e,t,r){void 0===r&&(r=0);var o=e.schedule((function(){try{t.call(this)}catch(e){n.error(e)}}),r);n.add(o)}(t,e,(function(){var n=r.next(),e=n.value;n.done?t.complete():(t.next(e),this.schedule())}))}))),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(n,e);if(K(n))return function(n,e){return U(W(n),e)}(n,e)}throw J(n)}(n,e):V(n)}function V(n){if(n instanceof B)return n;if(null!=n){if(q(n))return o=n,new B((function(n){var e=o[d]();if(s(e.subscribe))return e.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(n))return X(n);if(l(n))return t=n,new B((function(n){t.then((function(e){n.closed||(n.next(e),n.complete())}),(function(e){return n.error(e)})).then(null,T)}));if(z(n))return Z(n);if(G(n))return e=n,new B((function(n){var t,o;try{for(var i=r(e),u=i.next();!u.done;u=i.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){t={error:n}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}n.complete()}));if(K(n))return Z(W(n))}var e,t,o;throw J(n)}function X(n){return new B((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}))}function Z(n){return new B((function(e){(function(n,e){var o,i,u,c;return function(n,e,t,r){return new(t||(t=Promise))((function(o,i){function u(n){try{a(r.next(n))}catch(n){i(n)}}function c(n){try{a(r.throw(n))}catch(n){i(n)}}function a(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(u,c)}a((r=r.apply(n,e||[])).next())}))}(this,void 0,void 0,(function(){var a,s;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),o=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,t=n[Symbol.asyncIterator];return t?t.call(n):(n=r(n),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(t){e[t]=n[t]&&function(e){return new Promise((function(r,o){!function(n,e,t,r){Promise.resolve(r).then((function(e){n({value:e,done:t})}),e)}(r,o,(e=n[t](e)).done,e.value)}))}}}(n),t.label=1;case 1:return[4,o.next()];case 2:if((i=t.sent()).done)return[3,4];if(a=i.value,e.next(a),e.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=t.sent(),u={error:s},[3,11];case 6:return t.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(n,e).catch((function(n){return e.error(n)}))}))}function $(n){return function(e){if(function(n){return s(null==n?void 0:n.lift)}(e))return e.lift((function(e){try{return n(e,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}var nn=function(n){function t(e,t,r,o,i){var u=n.call(this,e)||this;return u.onFinalize=i,u._next=t?function(n){try{t(n)}catch(n){e.error(n)}}:n.prototype._next,u._error=o?function(n){try{o(n)}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._error,u._complete=r?function(){try{r()}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,u}return e(t,n),t.prototype.unsubscribe=function(){var e,t=this.closed;n.prototype.unsubscribe.call(this),!t&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},t}(P);function en(n,e){return $((function(t,r){var o=0;t.subscribe(new nn(r,(function(t){r.next(n.call(e,t,o++))})))}))}function tn(n,e,t){return void 0===t&&(t=1/0),s(e)?tn((function(t,r){return en((function(n,o){return e(t,n,r,o)}))(V(n(t,r)))}),t):("number"==typeof e&&(t=e),$((function(e,r){return function(n,e,t,r,o,i,u,c){var a=[],s=0,l=0,f=!1,d=function(){!f||a.length||s||e.complete()},h=function(n){return s<r?p(n):a.push(n)},p=function(n){s++;var o=!1;V(t(n,l++)).subscribe(new nn(e,(function(n){e.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)n=void 0,n=a.shift(),p(n);d()}catch(n){e.error(n)}var n})))};return n.subscribe(new nn(e,h,(function(){f=!0,d()}))),function(){}}(e,r,n,t)})))}function rn(n){return void 0===n&&(n=1/0),tn(j,n)}function on(n,e){return e?R(n,e):X(n)}var un=new B((function(n){return n.complete()}));function cn(n){return n&&s(n.schedule)}function an(n){return n[n.length-1]}function sn(n){return s(an(n))?n.pop():void 0}function ln(n){return cn(an(n))?n.pop():void 0}function fn(n,e){return"number"==typeof an(n)?n.pop():e}var dn=document.getElementById("coffee-packets"),hn=Q(["AFFOGATO","CAFFÈ MOCHA","CAPPUCCINO","CAFÈ AU LAIT"]),pn=Q(["COLD BREW COFFEE","DOUBLE ESPRESSO","ESPRESSO CON PANNA"]),vn=Array.isArray;var yn=["addListener","removeListener"],bn=["addEventListener","removeEventListener"],mn=["on","off"];function wn(n,e){return function(t){return function(r){return n[t](e,r)}}}var gn=function(n){function t(e,t){return n.call(this)||this}return e(t,n),t.prototype.schedule=function(n,e){return void 0===e&&(e=0),this},t}(v),En={setInterval:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=En.delegate;return((null==t?void 0:t.setInterval)||setInterval).apply(void 0,i([],o(n)))},clearInterval:function(n){var e=En.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(n)},delegate:void 0},xn=function(n){function t(e,t){var r=n.call(this,e,t)||this;return r.scheduler=e,r.work=t,r.pending=!1,r}return e(t,n),t.prototype.schedule=function(n,e){if(void 0===e&&(e=0),this.closed)return this;this.state=n;var t=this.id,r=this.scheduler;return null!=t&&(this.id=this.recycleAsyncId(r,t,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},t.prototype.requestAsyncId=function(n,e,t){return void 0===t&&(t=0),En.setInterval(n.flush.bind(n,this),t)},t.prototype.recycleAsyncId=function(n,e,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return e;En.clearInterval(e)},t.prototype.execute=function(n,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(n,e);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,e){var t,r=!1;try{this.work(n)}catch(n){r=!0,t=!!n&&n||new Error(n)}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(gn),_n={now:function(){return(_n.delegate||Date).now()},delegate:void 0},Tn=function(){function n(e,t){void 0===t&&(t=n.now),this.schedulerActionCtor=e,this.now=t}return n.prototype.schedule=function(n,e,t){return void 0===e&&(e=0),new this.schedulerActionCtor(this,n).schedule(t,e)},n.now=_n.now,n}(),Cn=new(function(n){function t(e,t){void 0===t&&(t=Tn.now);var r=n.call(this,e,t)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(t,n),t.prototype.flush=function(n){var e=this.actions;if(this._active)e.push(n);else{var t;this._active=!0;do{if(t=n.execute(n.state,n.delay))break}while(n=e.shift());if(this._active=!1,t){for(;n=e.shift();)n.unsubscribe();throw t}}},t}(Tn))(xn),Sn=Cn,An="http://localhost:3000";function In(n){return Q(fetch(An+"/coffees?name_like="+n).then((function(n){if(n.ok)return n.json();throw new Error("Error in fetching data.")})).catch((function(n){return console.log("Error: "+n)})))}var Ln=document.getElementById("coffee-shop"),Pn=document.getElementById("coffee-cart"),On=0;function Nn(n,e){if(!n)throw new Error("Host doesn't exist.");var t=document.createElement("div");t.className="cardContainer",n.appendChild(t);var r=document.createElement("div");r.className="imageDiv",t.appendChild(r);var o=document.createElement("img");o.className="imageForCoffee",o.src=e.image,r.appendChild(o);var i=document.createElement("div");i.className="divCardContent",t.appendChild(i);var u=document.createElement("h2");u.className="name",u.innerHTML=e.name,i.appendChild(u);var c=document.createElement("div");c.className="paragraph",c.innerHTML=e.description,i.appendChild(c);var a=document.createElement("div");a.className="divCP",i.appendChild(a);var s=document.createElement("div");s.className="divCoffein",s.innerHTML=e.coffein.toString()+"% ☕",a.appendChild(s);var l=document.createElement("div");l.className="divPrice",l.innerHTML="💲"+e.price.toString(),a.appendChild(l);var f=document.createElement("div");f.className="divButton",i.appendChild(f);var d=document.createElement("button");d.className="button",d.innerHTML="ADD TO CART",f.appendChild(d),d.onclick=function(n){!function(n,e){var t=document.createElement("div");t.className="cartItem";var r=document.getElementById("total");if("<h3>Your cart is empty. Add items :)</h3>"==Pn.innerHTML.trim())Pn.innerHTML="",Pn.appendChild(t),(o=document.createElement("div")).className="divCartText",(i=document.createElement("div")).className="divCartPrice",o.innerHTML=n,i.innerHTML=e,t.appendChild(o),t.appendChild(i),r.innerHTML="Total: "+e;else{var o,i;Pn.appendChild(t),(o=document.createElement("div")).className="divCartText",(i=document.createElement("div")).className="divCartPrice",o.innerHTML=n,i.innerHTML=e,t.appendChild(o),t.appendChild(i);var u=r.innerHTML,c=parseInt(u.slice(9).trim());c+=parseInt(e.slice(2)),r.innerHTML="Total: 💲"+c}}(t.querySelector(".name").innerHTML,i.querySelector(".divPrice").innerHTML)}}var kn=Array.isArray;function Mn(n){return 1===n.length&&kn(n[0])?n[0]:n}function Hn(){return rn(1)}function jn(n){return n<=0?function(){return un}:$((function(e,t){var r=0;e.subscribe(new nn(t,(function(e){++r<=n&&(t.next(e),n<=r&&t.complete())})))}))}function Fn(n,e){return e?function(t){return function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return Hn()(on(n,ln(n)))}(e.pipe(jn(1),$((function(n,e){n.subscribe(new nn(e,C))}))),t.pipe(Fn(n)))}:tn((function(e,t){return n(e,t).pipe(jn(1),function(n){return en((function(){return n}))}(e))}))}function Bn(n,e){void 0===e&&(e=Cn);var t=function(n,e,t){void 0===n&&(n=0),void 0===t&&(t=Sn);var r=-1;return null!=e&&(cn(e)?t=e:r=e),new B((function(e){var o,i=(o=n)instanceof Date&&!isNaN(o)?+n-t.now():n;i<0&&(i=0);var u=0;return t.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),i)}))}(n,e);return Fn((function(){return t}))}var Dn,Rn,Yn,Un,qn,Gn,zn,Jn=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=ln(n);return t?R(n,t):on(n)}("Your desert on meni today:"),Wn=Q(fetch(An+"/cockies?name=Jaffa").then((function(n){if(n.ok)return n.json();throw new Error("Error in fetching data.")})).catch((function(n){return console.log("Error: "+n)}))),Kn=Q(fetch(An+"/toppings?name=cream").then((function(n){if(n.ok)return n.json();throw new Error("Error in fetching data.")})).catch((function(n){return console.log("Error: "+n)}))),Qn=In("AFFOGATO");Q(fetch(An+"/coffees").then((function(n){if(n.ok)return n.json();throw new Error("Error in fetching data.")})).catch((function(n){return console.log("Error: "+n)}))).pipe(en((function(n){return n[On++]})),(Dn=20,void 0===Dn&&(Dn=1/0),Dn<=0?function(){return un}:$((function(n,e){var t,r=0,o=function(){var i=!1;t=n.subscribe(new nn(e,void 0,(function(){++r<Dn?t?(t.unsubscribe(),t=null,o()):i=!0:e.complete()}))),i&&(t.unsubscribe(),t=null,o())};o()})))).subscribe((function(n){return Nn(Ln,n)})),qn=document.getElementById("search-box"),(Gn=document.createElement("input")).type="text",Gn.placeholder="Search..",Gn.className="searchBox",qn.appendChild(Gn),Gn.oninput=function(n){Ln.innerHTML=""},function n(e,t,r,u){if(s(r)&&(u=r,r=void 0),u)return n(e,t,r).pipe((c=u,en((function(n){return function(n,e){return vn(e)?n.apply(void 0,i([],o(e))):n(e)}(c,n)}))));var c,l=o(function(n){return s(n.addEventListener)&&s(n.removeEventListener)}(e)?bn.map((function(n){return function(o){return e[n](t,o,r)}})):function(n){return s(n.addListener)&&s(n.removeListener)}(e)?yn.map(wn(e,t)):function(n){return s(n.on)&&s(n.off)}(e)?mn.map(wn(e,t)):[],2),f=l[0],d=l[1];if(!f&&a(e))return tn((function(e){return n(e,t,r)}))(on(e));if(!f)throw new TypeError("Invalid event target");return new B((function(n){var e=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.next(1<e.length?e:e[0])};return f(e),function(){return d(e)}}))}(Gn,"input").pipe((600,void 0===Un&&(Un=Cn),$((function(n,e){var t=null,r=null,o=null,i=function(){if(t){t.unsubscribe(),t=null;var n=r;r=null,e.next(n)}};function u(){var n=o+600,r=Un.now();if(r<n)return t=this.schedule(void 0,n-r),void e.add(t);i()}n.subscribe(new nn(e,(function(n){r=n,o=Un.now(),t||(t=Un.schedule(u,600),e.add(t))}),(function(){i(),e.complete()}),void 0,(function(){r=t=null})))}))),en((function(n){return n.target.value})),(Yn=function(n){return n.length>=3},$((function(n,e){var t=0;n.subscribe(new nn(e,(function(n){return Yn.call(undefined,n,t++)&&e.next(n)})))}))),en((function(n){return n.toUpperCase()})),(Rn=function(n){return In(n)},$((function(n,e){var t=null,r=!1,o=function(){return r&&!t&&e.complete()};n.subscribe(new nn(e,(function(n){null==t||t.unsubscribe();0;V(Rn(n)).subscribe(t=new nn(e,(function(n){return e.next(n)}),(function(){t=null,o()})))}),(function(){r=!0,o()})))})))).subscribe((function(n){n.map((function(n){return Nn(Ln,n)}))})),function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=ln(n),r=fn(n,1/0),o=n;return o.length?1===o.length?V(o[0]):rn(r)(on(o,t)):un}(pn,hn).subscribe((function(n){return function(n){var e=document.createElement("div"),t=document.createElement("input");t.type="radio",t.name="group",t.value=n;var r=document.createElement("label");r.innerHTML=n,r.className="coffeLabel",e.appendChild(t),e.appendChild(r),dn.appendChild(e)}(n)})),(zn=document.createElement("button")).innerHTML="Order",zn.className="orderButton",zn.addEventListener("click",(function(){alert("You can order these packets.\nFor price you can look at the coffee shop.")})),dn.appendChild(zn),function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=sn(n),r=Mn(n);return r.length?new B((function(n){var e=r.map((function(){return[]})),u=r.map((function(){return!1}));n.add((function(){e=u=null}));for(var c=function(c){V(r[c]).subscribe(new nn(n,(function(r){if(e[c].push(r),e.every((function(n){return n.length}))){var a=e.map((function(n){return n.shift()}));n.next(t?t.apply(void 0,i([],o(a))):a),e.some((function(n,e){return!n.length&&u[e]}))&&n.complete()}}),(function(){u[c]=!0,!e[c].length&&n.complete()})))},a=0;!n.closed&&a<r.length;a++)c(a);return function(){e=u=null}})):un}(Jn,Wn.pipe(Bn(1e3)),Kn.pipe(Bn(3e3)),Qn.pipe(Bn(4e3))).subscribe((function(n){return console.log(n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,